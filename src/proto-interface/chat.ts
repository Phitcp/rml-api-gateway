// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: chat.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "chat";

export interface GetChatHistoryRequest {
  roomId: string;
  roomType: string;
  participants: string[];
  limit: number;
  skip: number;
}

export interface ChatMessage {
  roomId: string;
  messageId: string;
  content: string;
  userId: string;
  senderName: string;
  createdAt: number;
  updatedAt: number;
}

export interface GetChatHistoryResponse {
  messages: ChatMessage[];
}

export interface SendMessageRequest {
  roomId?: string | undefined;
  participants: string[];
  content: string;
  userId: string;
}

export interface SendMessageResponse {
  message: ChatMessage | undefined;
}

export interface PingResponse {
  message: string;
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  ping(request: Empty): Observable<PingResponse>;

  getChatHistory(request: GetChatHistoryRequest): Observable<GetChatHistoryResponse>;

  sendMessage(request: SendMessageRequest): Observable<SendMessageResponse>;
}

export interface ChatServiceController {
  ping(request: Empty): Promise<PingResponse> | Observable<PingResponse> | PingResponse;

  getChatHistory(
    request: GetChatHistoryRequest,
  ): Promise<GetChatHistoryResponse> | Observable<GetChatHistoryResponse> | GetChatHistoryResponse;

  sendMessage(
    request: SendMessageRequest,
  ): Promise<SendMessageResponse> | Observable<SendMessageResponse> | SendMessageResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["ping", "getChatHistory", "sendMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
