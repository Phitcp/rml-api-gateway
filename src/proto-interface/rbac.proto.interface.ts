// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: rbac.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "rbac";

export interface PermissionRequest {
  userId: string;
}

export interface PermissionResponse {
  allowed: boolean;
  reason: string;
  roles: string[];
  permissions: string[];
}

export interface UserRolesRequest {
  userId: string;
}

export interface UserRolesResponse {
  roles: Role[];
}

export interface Role {
  id: string;
  name: string;
  permissions: string[];
}

export interface RoleCheckRequest {
  userId: string;
  roleName: string;
}

export interface RoleCheckResponse {
  hasRole: boolean;
}

export const RBAC_PACKAGE_NAME = "rbac";

export interface RBACServiceClient {
  checkPermission(request: PermissionRequest): Observable<PermissionResponse>;

  getUserRoles(request: UserRolesRequest): Observable<UserRolesResponse>;

  hasRole(request: RoleCheckRequest): Observable<RoleCheckResponse>;
}

export interface RBACServiceController {
  checkPermission(
    request: PermissionRequest,
  ): Promise<PermissionResponse> | Observable<PermissionResponse> | PermissionResponse;

  getUserRoles(
    request: UserRolesRequest,
  ): Promise<UserRolesResponse> | Observable<UserRolesResponse> | UserRolesResponse;

  hasRole(request: RoleCheckRequest): Promise<RoleCheckResponse> | Observable<RoleCheckResponse> | RoleCheckResponse;
}

export function RBACServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["checkPermission", "getUserRoles", "hasRole"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RBACService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RBACService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RBAC_SERVICE_NAME = "RBACService";
