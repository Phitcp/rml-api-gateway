import { Metadata } from '@grpc/grpc-js';
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: chat.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'chat';

export interface GetChatHistoryRequest {
  roomId: string;
  roomType: string;
  participants: string[];
  limit: number;
  skip: number;
}

export interface ChatMessage {
  roomId: string;
  messageId: string;
  content: string;
  userId: string;
  userSlugId: string;
  senderName: string;
  createdAt: number;
  updatedAt: number;
  status: string;
}

export interface GetChatHistoryResponse {
  messages: ChatMessage[];
}

export interface SendMessageRequest {
  roomId?: string;
  participants?: string[];
  content: string;
  userId: string;
  userSlugId: string;
  senderName: string;
}

export interface SendMessageResponse {
  message: ChatMessage | undefined;
}

export interface PingResponse {
  message: string;
}

export const CHAT_PACKAGE_NAME = 'chat';

export interface ChatServiceClient {
  getChatHistory(
    request: GetChatHistoryRequest,
    metadata: Metadata
  ): Observable<GetChatHistoryResponse>;

  sendMessage(request: SendMessageRequest, metaData: Metadata): Observable<SendMessageResponse>;

  ping(param: any): Observable<PingResponse>;
}

export interface ChatServiceController {
  getChatHistory(
    request: GetChatHistoryRequest,
  ):
    | Promise<GetChatHistoryResponse>
    | Observable<GetChatHistoryResponse>
    | GetChatHistoryResponse;

  sendMessage(
    request: SendMessageRequest,
  ):
    | Promise<SendMessageResponse>
    | Observable<SendMessageResponse>
    | SendMessageResponse;

  ping(): Promise<PingResponse> | Observable<PingResponse> | PingResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getChatHistory', 'sendMessage'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('ChatService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('ChatService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CHAT_SERVICE_NAME = 'ChatService';
